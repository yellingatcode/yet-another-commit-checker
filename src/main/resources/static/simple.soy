{namespace com.atlassian.stash.repository.hook.ref}
/**
 * @param config
 * @param errors
 */
{template .formContents}
	{call aui.form.checkboxField}
		{param legendContent: 'Require Matching Committer Email' /}
		{param fields: [[
			'id' : 'requireMatchingAuthorEmail',
			'labelText': 'Enabled',
			'isChecked' : $config['requireMatchingAuthorEmail']
		]] /}
		{param descriptionText: 'Require that the commit committer\'s email matches the Stash user\'s email.' /}
	{/call}

	{call aui.form.checkboxField}
		{param legendContent: 'Require Matching Committer Name' /}
		{param fields: [[
			'id' : 'requireMatchingAuthorName',
			'labelText': 'Enabled',
			'isChecked' : $config['requireMatchingAuthorName']
		]] /}
		{param descriptionText: 'Require that the commit committer\'s name matches the Stash user\'s name.' /}
	{/call}

	{call aui.form.textField}
		{param id: 'commitMessageRegex' /}
		{param labelContent: 'Commit Message Regex' /}
		{param value: $config['commitMessageRegex'] /}
		{param descriptionText: 'Require that commit messages match this regular expression.' /}
		{param errorTexts: $errors ? $errors['commitMessageRegex'] : null /}
	{/call}

  <h3>Application Link</h3>

  {call aui.form.textField}
    {param id: 'jiraApplicationLinkName' /}
    {param labelContent: 'Application Link Name' /}
    {param value: $config['jiraApplicationLinkName'] /}
    {param descriptionText: 'Application Link Name that links to JIRA. (If blank it will assume the primary).' /}
    {param errorTexts: $errors ? $errors['jiraApplicationLinkName'] : null /}
  {/call}

  <h3>JIRA Issue Requirements</h3>

	{call aui.form.checkboxField}
		{param legendContent: 'Require Valid JIRA Issue(s)' /}
		{param fields: [[
			'id' : 'requireJiraIssue',
			'labelText': 'Enabled',
			'isChecked' : $config['requireJiraIssue']
		]] /}
		{param descriptionText: 'Require that the commit message contains valid JIRA issue(s). Note, by default, all items that match [A-Z][A-Z_0-9]+-[0-9]+ will be treated as JIRA issues. If a commit message regex is configured and a regex group exists, then only this group will be checked for JIRA issues.' /}
        {param errorTexts: $errors ? $errors['requireJiraIssue'] : null /}
	{/call}

	{call aui.form.checkboxField}
		{param legendContent: 'Ignore Unknown JIRA Project Keys' /}
		{param fields: [[
			'id' : 'ignoreUnknownIssueProjectKeys',
			'labelText': 'Enabled',
			'isChecked' : $config['ignoreUnknownIssueProjectKeys']
		]] /}
		{param descriptionText: 'If this option is enabled, any issue-like items in the commit message that do not contain a valid JIRA project key (such as "UTF-8") will be ignored.' /}
        {param errorTexts: $errors ? $errors['ignoreUnknownIssueProjectKeys'] : null /}
	{/call}

	{call aui.form.textField}
		{param id: 'issueJqlMatcher' /}
		{param labelContent: 'Issue Jql Matcher' /}
		{param value: $config['issueJqlMatcher'] /}
		{param descriptionText: 'If present, JIRA issues must match this JQL query.' /}
		{param errorTexts: $errors ? $errors['issueJqlMatcher'] : null /}
	{/call}

	<h3>Branch Requirements</h3>

  {call aui.form.textField}
    {param id: 'branchNameRegex' /}
    {param labelContent: 'Branch Name Regex' /}
    {param value: $config['branchNameRegex'] /}
    {param descriptionText: 'If present, only branches with names that match this regex will be allowed to be created. This affects both new branches being pushed and branches created within the Stash UI.' /}
    {param errorTexts: $errors ? $errors['branchNameRegex'] : null /}
  {/call}

  <h3>Error Message Customization</h3>

  {call aui.form.textareaField}
    {param id: 'errorMessageHeader' /}
    {param labelContent: 'Header' /}
    {param value: $config['errorMessageHeader'] /}
    {param descriptionText: 'If present, the default error message header will be replaced by this text.' /}
    {param errorTexts: $errors ? $errors['errorMessageHeader'] : null /}
    {param rows: '4' /}
  {/call}

  {call aui.form.textareaField}
    {param id: 'errorMessage.COMMITTER_EMAIL' /}
    {param labelContent: 'Committer Email Error' /}
    {param value: $config['errorMessage.COMMITTER_EMAIL'] /}
    {param errorTexts: $errors ? $errors['errorMessage.COMMITTER_EMAIL'] : null /}
    {param descriptionText: 'If present, this text will be shown when the Require Matching Committer Email check fails.' /}
    {param rows: '4' /}
  {/call}

  {call aui.form.textareaField}
    {param id: 'errorMessage.COMMITTER_NAME' /}
    {param labelContent: 'Committer Name Error' /}
    {param value: $config['errorMessage.COMMITTER_NAME'] /}
    {param errorTexts: $errors ? $errors['errorMessage.COMMITTER_NAME'] : null /}
    {param descriptionText: 'If present, this text will be shown when the Require Matching Committer Name check fails.' /}
    {param rows: '4' /}
  {/call}

  {call aui.form.textareaField}
    {param id: 'errorMessage.COMMIT_REGEX' /}
    {param labelContent: 'Commit Regex Error' /}
    {param value: $config['errorMessage.COMMIT_REGEX'] /}
    {param errorTexts: $errors ? $errors['errorMessage.COMMIT_REGEX'] : null /}
    {param descriptionText: 'If present, this text will be shown when the Commit Message Regex check fails.' /}
    {param rows: '4' /}
  {/call}

  {call aui.form.textareaField}
    {param id: 'errorMessage.ISSUE_JQL' /}
    {param labelContent: 'Issue Jql Matcher Error' /}
    {param value: $config['errorMessage.ISSUE_JQL'] /}
    {param errorTexts: $errors ? $errors['errorMessage.ISSUE_JQL'] : null /}
    {param descriptionText: 'If present, this text will be shown when the Issue Jql Matcher check fails.' /}
    {param rows: '4' /}
  {/call}

  {call aui.form.textareaField}
    {param id: 'errorMessage.BRANCH_NAME' /}
    {param labelContent: 'Branch Name Regex Error' /}
    {param value: $config['errorMessage.BRANCH_NAME'] /}
    {param errorTexts: $errors ? $errors['errorMessage.BRANCH_NAME'] : null /}
    {param descriptionText: 'If present, this text will be shown when the Branch Name Regex check fails.' /}
    {param rows: '4' /}
  {/call}

  {call aui.form.textareaField}
    {param id: 'errorMessageFooter' /}
    {param labelContent: 'Footer' /}
    {param value: $config['errorMessageFooter'] /}
    {param descriptionText: 'If present, this text will be included at the end of the YACC error message. For example, you could include a link to your company\'s commit style guide for further clarification on commit requirements.' /}
    {param errorTexts: $errors ? $errors['errorMessageFooter'] : null /}
    {param rows: '4' /}
  {/call}

  <h3>Exclude Commits</h3>

  {call aui.form.checkboxField}
    {param legendContent: 'Exclude Merge Commits' /}
      {param fields: [[
        'id' : 'excludeMergeCommits',
        'labelText': 'Enabled',
        'isChecked' : $config['excludeMergeCommits']
      ]] /}
    {param descriptionText: 'Exclude merge commits from commit requirements.' /}
  {/call}

  {call aui.form.textField}
		{param id: 'excludeByRegex' /}
		{param labelContent: 'Exclude by Regex' /}
		{param value: $config['excludeByRegex'] /}
		{param descriptionText: 'Exclude commits if commit message matches this regex.' /}
		{param errorTexts: $errors ? $errors['excludeByRegex'] : null /}
   {/call}

   {call aui.form.checkboxField}
    {param legendContent: 'Exclude Service User Commits' /}
      {param fields: [[
        'id' : 'excludeServiceUserCommits',
        'labelText': 'Enabled',
        'isChecked' : $config['excludeServiceUserCommits']
      ]] /}
    {param descriptionText: 'Exclude commits from service users with access keys (e.g. CI Server) from commit requirements.' /}
  {/call}

{/template}